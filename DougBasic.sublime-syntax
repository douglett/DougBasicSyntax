%YAML 1.2
---
# Formatting info:
#   http://www.sublimetext.com/docs/3/syntax.html
#   https://www.sublimetext.com/docs/scope_naming.html
#   https://stackoverflow.com/questions/18239767/enable-automatic-commenting-in-sublime-text-for-a-custom-syntax
name: DougBasic
file_extensions: [ bas ]
scope: source.dbasic

variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'

contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape character
    - match: '"'
      scope: punctuation.definition.string.begin.dbasic
      push: double_quoted_string

    # Comments begin with a '#' and finish at the end of the line
    - match: '#'
      scope: punctuation.definition.comment
      push: line_comment

    # Seperators
    - match: '(,|;)'
      scope: punctuation.separator.dbasic

    # Function definition
    - match: '(?i)^\W*(system\W*)?\bfunction\b'
      scope: keyword.control.dbasic
      push: function_definition

    # Regular Keywords
    - match: '(?i)\b(if|else|end|for|while|function|type|return|die|break|continue)\b'
      scope: keyword.control.dbasic

    # Statement Keywords
    - match: '\b(let|local|dim|call|print|input)\b'
      # scope: entity.name .keycommand.dbasic # green
      scope: storage.type.keycommand.dbasic  # blue

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.dbasic

    # Boolean
    - match: '\b(true|false)\b'
      scope: constant.language.dbasic

    # Function call
    - match: '\b{{ident}}(?=\()\b'
      scope: variable.function.dbasic
      # scope: meta.function-call.dbasic

  double_quoted_string:
    - meta_scope: string.quoted.double.dbasic
    - match: '\\.'
      scope: constant.character.escape.dbasic
    - match: '"'
      scope: punctuation.definition.string.end.dbasic
      pop: true

  line_comment:
    - meta_scope: comment.line.dbasic
    - match: $
      pop: true

  function_definition:
    - meta_scope: function.definition.dbasic
    #- match: '\b{{ident}}(?=\()\b'
    - match: '\b{{ident}}\b'
      scope: entity.name.dbasic
    - match: '\(|$'
      pop: true
